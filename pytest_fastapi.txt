import pytest
from fastapi.testclient import TestClient
from app import app

@pytest.fixture(scope="module")
def test_client():
    # Create a test client
    client = TestClient(app)
    yield client

def test_root(test_client):
    # Test the root endpoint
    response = test_client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello, world!"}

def test_prediction(test_client):
    # Test the prediction endpoint
    input_data = {"feature_1": [1, 2, 3], "feature_2": [4, 5, 6]}
    response = test_client.post("/predict", json=input_data)
    assert response.status_code == 200
    assert "predictions" in response.json()
    
    
    
    
    
    
    In this example, we define two test functions: test_root and test_prediction. We also define a test_client fixture that creates a test client and yields it to the tests.

The test_root function tests the root endpoint ("/") and ensures that it returns a 200 status code and a JSON message indicating that the API is up and running.

The test_prediction function tests the prediction endpoint ("/predict") and sends a request with a sample input data in JSON format. It tests that the response has a 200 status code and a predictions key in the response JSON.

Note that we pass the test_client fixture to the test functions as an argument to use it as the test client.

Finally, we can run the tests with pytest in the command line.
