You can achieve this using PySpark as well. Here's how you can create a fifth column with a set of all phone numbers using PySpark:

```python
from pyspark.sql import SparkSession
from pyspark.sql.functions import udf
from pyspark.sql.types import ArrayType, StringType

# Initialize a Spark session
spark = SparkSession.builder.appName("PhoneNumbers").getOrCreate()

# Sample DataFrame
data = [(1, "123-456-7890", "987-654-3210", "555-555-5555"),
        (2, "111-222-3333", "444-555-6666", "777-888-9999")]
columns = ["emp-id", "phn1", "phn2", "phn3"]
df = spark.createDataFrame(data, columns)

# Define a UDF to create a set of all phone numbers
def create_phone_set(phn1, phn2, phn3):
    return set([phn1, phn2, phn3])

udf_create_phone_set = udf(create_phone_set, ArrayType(StringType()))

# Add a new column 'all_phones' with the set of all phone numbers
df = df.withColumn("all_phones", udf_create_phone_set(df["phn1"], df["phn2"], df["phn3"]))

# Show the DataFrame with the new column
df.show()
```

This code initializes a PySpark session, defines a User-Defined Function (UDF) to create a set of all phone numbers, and then adds a new column 'all_phones' to the DataFrame using the UDF. The result will be a DataFrame with the desired fifth column containing sets of phone numbers.