To find employees who have changed their phone numbers in the last 5 days using PySpark, you can use the following recipe. In this recipe, we will assume that you have a DataFrame named `employee_data` containing the employee details, and it has the columns `emp-id`, `phn-cell`, `phn-home`, `phn-mob`, `phn-ofc-1`, `phn-ofc-2`, `email-1`, `email-2`, `date-start`, and `date-end`.

First, you need to filter the data for changes within the last 5 days and then compare the new and previous phone numbers to find unique changes using sets.

```python
from pyspark.sql import SparkSession
from pyspark.sql.window import Window
from pyspark.sql.functions import collect_list, lit, array_except, size, unix_timestamp

# Initialize Spark session
spark = SparkSession.builder.appName("PhoneChangeAnalysis").getOrCreate()

# Assuming you have a DataFrame named employee_data
# Replace 'employee_data' with your actual DataFrame name

# Filter the data for changes in the last 5 days
window_spec = Window.partitionBy("emp-id").orderBy("date-start")

employee_data = employee_data.withColumn(
    "date-start", unix_timestamp("date-start", "yyyy-MM-dd").cast("timestamp")
)

employee_data = employee_data.filter(
    (employee_data["date-start"] >= (current_date() - lit(5))) &
    (employee_data["date-start"] <= current_date())
)

# Collect previous phone numbers into an array
phone_columns = ["phn-cell", "phn-home", "phn-mob", "phn-ofc-1", "phn-ofc-2"]
employee_data = employee_data.withColumn(
    "prev_phones", collect_list("phn").over(window_spec)
)

# Calculate the number of unique changes in phone numbers
employee_data = employee_data.withColumn(
    "unique_changes",
    size(array_except(employee_data["prev_phones"], phone_columns))
)

# Filter employees with unique phone number changes
changed_employees = employee_data.filter(employee_data["unique_changes"] > 0)

# Show the results
changed_employees.select("emp-id").distinct().show()

# Stop the Spark session
spark.stop()
```

This code first filters the data for changes within the last 5 days, collects previous phone numbers into an array using a window function, and then calculates the number of unique changes in phone numbers for each employee. Finally, it filters employees who have made unique phone number changes and displays their `emp-id`.